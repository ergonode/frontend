name: E2E Tests

on:
  push:
    branches: [ master ]
  pull_request:

jobs:
  install-be:
    runs-on: ubuntu-latest
    env:
      APP_ENV: prod
      APP_DEBUG: false
      DATABASE_URL: pgsql://ergonode:123@localhost:5432/ergonode_test?serverVersion=10&charset=utf8
      USE_ASYNC_BUS: true
      LEAVE_TEST_TAG_ATTRS: true
      API_BASE_URL: http://localhost:8000/api/v1/

    steps:
      - uses: actions/checkout@v2

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          coverage: none
          extensions: imagick

      - name: Set up PostgreSQL
        uses: harmon758/postgresql-action@v1
        with:
          postgresql version: 10
          postgresql user: ergonode
          postgresql password: 123

      - name: Set up RabbitMQ
        uses: getong/rabbitmq-action@v1.2
        with:
          rabbitmq version: 'latest'
          host port: 5672
          rabbitmq user: 'guest'
          rabbitmq password: 'guest'
          rabbitmq vhost: '/'

      - name: PHP version
        run: php -v

      - name: Clone Backend
        uses: actions/checkout@master
        with:
          repository: ergonode/backend
          path: backend

      - name: Run backend
        run: |
          cd backend
          composer install
          openssl genrsa -aes256 -passout pass:1234 -out "config/jwt/private.pem" 4096
          openssl rsa -pubout -in "config/jwt/private.pem" -passin pass:1234 -out "config/jwt/public.pem"
          ./bin/phing database:create
          ./bin/phing database:migrate
          ./bin/phing database:fixture:e2e
          wget https://get.symfony.com/cli/installer -O - | bash
          ~/.symfony/bin/symfony server:start -d --no-tls --port=8000
          cd ..

      - name: Test backend
        run: wget localhost:8000/api/doc

      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: artifacts
          path: |
            ./backend/var/log

  install-node:
    runs-on: ubuntu-latest
    container: cypress/browsers:node12.18.3-chrome87-ff82
    needs: install-be
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'

      - name: Cache dependencies
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Run frontend
        run: |
          npm ci
          npm run modules:all
          npm run build

      # - name: Test frontend
      #   run: wget --retry-connrefused --waitretry=1 localhost:3000

      - name: Save build folder
        uses: actions/upload-artifact@v2
        with:
          name: build
          if-no-files-found: error
          path: ./.nuxt

      # - name: Cypress install
      #   uses: cypress-io/github-action@v2
      #   with:
      #     # Disable running of tests within install job
      #     runTests: false
      #     build: yarn build

  ui-chrome-tests:
    runs-on: ubuntu-latest
    container: cypress/browsers:node12.18.3-chrome87-ff82
    needs: install-node
    strategy:
      fail-fast: false
      matrix:
        # run copies of the current job in parallel
        containers: [1, 2, 3, 4, 5]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download the build folders
        uses: actions/download-artifact@v2
        with:
          name: build
          path: ./.nuxt

      - name: 'UI Tests - Chrome'
        uses: cypress-io/github-action@v2
        with:
          # we have already installed all dependencies above
          install: false
          start:  npm run start
          wait-on: 'http://localhost:3000'
          wait-on-timeout: 120
          browser: chrome
          record: true
          parallel: true
          group: 'UI - Chrome'
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          # Recommended: pass the GitHub token lets this action correctly
          # determine the unique run id necessary to re-run the checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
